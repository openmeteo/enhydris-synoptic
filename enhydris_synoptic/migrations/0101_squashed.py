# Generated by Django 2.2.15 on 2020-10-20 07:23

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    replaces = [
        ("enhydris_synoptic", "0001_initial"),
        ("enhydris_synoptic", "0002_add_fresh_time_limit"),
        ("enhydris_synoptic", "0003_change_fresh_time_limit"),
        ("enhydris_synoptic", "0004_limits"),
        ("enhydris_synoptic", "0005_synopticgroup_time_zone"),
        ("enhydris_synoptic", "0006_timeseries_groups"),
        ("enhydris_synoptic", "0007_timeseries_groups_b"),
        ("enhydris_synoptic", "0008_timeseries_groups_c"),
    ]

    initial = True

    dependencies = [
        ("enhydris", "0037_timeseries_groups"),
        ("enhydris", "0025_gentity_geom"),
        ("enhydris", "0012_simplify_coordinates"),
    ]

    operations = [
        migrations.CreateModel(
            name="SynopticGroup",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=50)),
                (
                    "slug",
                    models.SlugField(
                        help_text="Identifier to be used in URL", unique=True
                    ),
                ),
                (
                    "fresh_time_limit",
                    models.DurationField(
                        help_text=(
                            "Maximum time that may have elapsed for the data to be "
                            "considered fresh. For data older than this the date on "
                            "the map shows red; for fresh data it shows green. Specify "
                            "it in seconds or in the format 'DD HH:MM:SS'."
                        )
                    ),
                ),
                (
                    "time_zone",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="enhydris.TimeZone",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="SynopticGroupStation",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("order", models.PositiveSmallIntegerField()),
                (
                    "station",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="enhydris.Station",
                    ),
                ),
                (
                    "synoptic_group",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="enhydris_synoptic.SynopticGroup",
                    ),
                ),
            ],
            options={
                "ordering": ["synoptic_group", "order"],
                "unique_together": {("synoptic_group", "order")},
            },
        ),
        migrations.AddField(
            model_name="synopticgroup",
            name="stations",
            field=models.ManyToManyField(
                through="enhydris_synoptic.SynopticGroupStation", to="enhydris.Station"
            ),
        ),
        migrations.CreateModel(
            name="SynopticTimeseriesGroup",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("order", models.PositiveSmallIntegerField()),
                (
                    "title",
                    models.CharField(
                        blank=True,
                        help_text=(
                            "Used as the chart title and as the time series title in "
                            "the report. Time series in different stations with the "
                            "same title will show as a layer on the map. Leave empty "
                            "to use the time series name."
                        ),
                        max_length=50,
                    ),
                ),
                (
                    "subtitle",
                    models.CharField(
                        blank=True,
                        help_text=(
                            "If time series are grouped, this is shows in the legend "
                            "of the chart and in the report, in brackets."
                        ),
                        max_length=50,
                    ),
                ),
                (
                    "default_chart_min",
                    models.FloatField(
                        blank=True,
                        help_text=(
                            "Minimum value of the y axis of the chart. If the variable "
                            "goes lower, the chart will automatically expand. If "
                            "empty, the chart will always expand just enough to "
                            "accomodate the value."
                        ),
                        null=True,
                    ),
                ),
                (
                    "default_chart_max",
                    models.FloatField(
                        blank=True,
                        help_text=(
                            "Maximum value of the y axis of the chart. If the variable "
                            "goes lower, the chart will automatically expand. If "
                            "empty, the chart will always expand just enough to "
                            "accomodate the value."
                        ),
                        null=True,
                    ),
                ),
                (
                    "group_with",
                    models.ForeignKey(
                        blank=True,
                        help_text=(
                            "Specify this field if you want to group this time series "
                            "with another in the same chart and in the report."
                        ),
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="enhydris_synoptic.SynopticTimeseriesGroup",
                    ),
                ),
                (
                    "synoptic_group_station",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="enhydris_synoptic.SynopticGroupStation",
                    ),
                ),
                (
                    "high_limit",
                    models.FloatField(
                        blank=True,
                        help_text=(
                            "If the variable goes higher than this, it will be shown "
                            "red on the map."
                        ),
                        null=True,
                    ),
                ),
                (
                    "low_limit",
                    models.FloatField(
                        blank=True,
                        help_text=(
                            "If the variable goes lower than this, it will be shown "
                            "red on the map."
                        ),
                        null=True,
                    ),
                ),
                (
                    "timeseries_group",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="enhydris.TimeseriesGroup",
                    ),
                ),
            ],
            options={
                "ordering": ["synoptic_group_station", "order"],
                "unique_together": {
                    ("synoptic_group_station", "order"),
                    ("synoptic_group_station", "timeseries_group"),
                },
            },
        ),
        migrations.AddField(
            model_name="synopticgroupstation",
            name="timeseries_groups",
            field=models.ManyToManyField(
                through="enhydris_synoptic.SynopticTimeseriesGroup",
                to="enhydris.TimeseriesGroup",
            ),
        ),
    ]
